model SampleModel {
	root capsule Top {
		capsuleInstance ps : ProductionSystem
	}
	capsule ProductionSystem {
		external port externalIn : StorageInProtocol
		external port externalOut : StorageOutProtocol
		port ~internalIn : StorageInProtocol
		port ~internalOut : StorageOutProtocol
		//	    connector internalOut and site0.storageOut
		logPort logger
		capsuleInstance site0 : Storage
		capsuleInstance site1 : Storage
		operation process() {
			return 0
		}
		stateMachine {
			state single {
				entry {
					log logger with "internalOut request"
					send internalOut.request()
				}
			}
			transition : initial -> single {
			}
			transition t2 : single -> single {
				triggeredBy internalOut.output(x)
				action {
					call process()
					send internalIn.input(0)
				}
			}
		}
	}
	capsule Storage {
		external port storageIn : StorageInProtocol
		external port storageOut : StorageOutProtocol
		logPort logger
		attribute size := 0
		attribute N := 10
		operation createSite() {
			log logger with 'A storage site has been created'
			return 0
		}
		operation insertPiece(pieceId) {
			log logger with 'A piece with ' ^ pieceId ^ ' has been inserted'

		}
		operation remove() {
			noop
		}
		stateMachine {
			state single
			transition init : initial -> single {
				action {
					log logger with "trigger create"
					call createSite()
				}
			}
			transition t2 : single -> single {
				guard {
					size > 0
				}
				triggeredBy storageOut.request()
				action {
					log logger with "trigger remove"
					call remove()
					send storageOut.output(0)
				}
			}
			transition t3 : single -> single {
				guard {
					size < N
				}
				triggeredBy storageIn.input(x)
				action {
					log logger with "trigger insert"
					call insertPiece(0)
				}
			}
		}
	}
	protocol StorageInProtocol {
		incoming {
			input(piece)
		}
	}
	protocol StorageOutProtocol {
		incoming {
			request()
		}
		outgoing {
			output(piece)
		}
	}
}